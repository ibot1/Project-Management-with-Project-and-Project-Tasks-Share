{"ast":null,"code":"import _defineProperty from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\src\\\\index1.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport \"@atlaskit/css-reset\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\nimport initialData from \"./dragcomponents/initial-data\";\nimport Column from \"./dragcomponents/column\";\nimport ReactDOM from \"react-dom\";\nvar Container = styled.div(_templateObject());\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = initialData;\n\n    _this.onDragEnd = function (result) {\n      var _objectSpread3;\n\n      var destination = result.destination,\n          source = result.source,\n          draggableId = result.draggableId; //origin, source, item to move were intialized by onDragEnd's prop\n      //return if not destination\n\n      if (!destination) {\n        return;\n      } //return if the item isn't moved\n\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      var start = _this.state.columns[source.droppableId]; //from column\n\n      var finish = _this.state.columns[destination.droppableId]; //to column\n\n      if (start === finish) {\n        var newTaskIds = Array.from(start.taskIds);\n        newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, draggableId);\n\n        var newColumn = _objectSpread({}, start, {\n          taskIds: newTaskIds\n        });\n\n        var _newState = _objectSpread({}, _this.state, {\n          columns: _objectSpread({}, _this.state.columns, _defineProperty({}, newColumn.id, newColumn))\n        });\n\n        _this.setState(_newState);\n\n        return;\n      } // Moving from one list to another\n\n\n      var startTaskIds = Array.from(start.taskIds);\n      startTaskIds.splice(source.index, 1);\n\n      var newStart = _objectSpread({}, start, {\n        taskIds: startTaskIds\n      });\n\n      var finishTaskIds = Array.from(finish.taskIds);\n      finishTaskIds.splice(destination.index, 0, draggableId);\n\n      var newFinish = _objectSpread({}, finish, {\n        taskIds: finishTaskIds\n      });\n\n      var newState = _objectSpread({}, _this.state, {\n        columns: _objectSpread({}, _this.state.columns, (_objectSpread3 = {}, _defineProperty(_objectSpread3, newStart.id, newStart), _defineProperty(_objectSpread3, newFinish.id, newFinish), _objectSpread3))\n      });\n\n      _this.setState(newState);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, this.state.columnOrder.map(function (columnId) {\n        var column = _this2.state.columns[columnId];\n        var tasks = column.taskIds.map(function (taskId) {\n          return _this2.state.tasks[taskId];\n        });\n        return React.createElement(Column, {\n          key: column.id,\n          column: column,\n          tasks: tasks,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App; //const rootElement = document.getElementById(\"root\");\n//ReactDOM.render(<App />, rootElement);","map":{"version":3,"sources":["S:\\Spring Boot\\pptool-react-client - Copy\\src\\index1.js"],"names":["React","DragDropContext","styled","initialData","Column","ReactDOM","Container","div","App","state","onDragEnd","result","destination","source","draggableId","droppableId","index","start","columns","finish","newTaskIds","Array","from","taskIds","splice","newColumn","newState","id","setState","startTaskIds","newStart","finishTaskIds","newFinish","columnOrder","map","columnId","column","tasks","taskId","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"@atlaskit/css-reset\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\n\r\nimport initialData from \"./dragcomponents/initial-data\";\r\nimport Column from \"./dragcomponents/column\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nclass App extends React.Component {\r\n  state = initialData;\r\n\r\n  //\r\n  onDragEnd = result => {\r\n    const { destination, source, draggableId } = result; //origin, source, item to move were intialized by onDragEnd's prop\r\n\r\n    //return if not destination\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    //return if the item isn't moved\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const start = this.state.columns[source.droppableId]; //from column\r\n    const finish = this.state.columns[destination.droppableId]; //to column\r\n\r\n    if (start === finish) {\r\n      const newTaskIds = Array.from(start.taskIds);\r\n      newTaskIds.splice(source.index, 1);\r\n      newTaskIds.splice(destination.index, 0, draggableId);\r\n\r\n      const newColumn = {\r\n        ...start,\r\n        taskIds: newTaskIds\r\n      };\r\n\r\n      const newState = {\r\n        ...this.state,\r\n        columns: {\r\n          ...this.state.columns,\r\n          [newColumn.id]: newColumn\r\n        }\r\n      };\r\n\r\n      this.setState(newState);\r\n      return;\r\n    }\r\n\r\n    // Moving from one list to another\r\n    const startTaskIds = Array.from(start.taskIds);\r\n    startTaskIds.splice(source.index, 1);\r\n    const newStart = {\r\n      ...start,\r\n      taskIds: startTaskIds\r\n    };\r\n\r\n    const finishTaskIds = Array.from(finish.taskIds);\r\n    finishTaskIds.splice(destination.index, 0, draggableId);\r\n    const newFinish = {\r\n      ...finish,\r\n      taskIds: finishTaskIds\r\n    };\r\n\r\n    const newState = {\r\n      ...this.state,\r\n      columns: {\r\n        ...this.state.columns,\r\n        [newStart.id]: newStart,\r\n        [newFinish.id]: newFinish\r\n      }\r\n    };\r\n    this.setState(newState);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        <Container>\r\n          {this.state.columnOrder.map(columnId => {\r\n            const column = this.state.columns[columnId];\r\n            const tasks = column.taskIds.map(\r\n              taskId => this.state.tasks[taskId]\r\n            );\r\n\r\n            return <Column key={column.id} column={column} tasks={tasks} />;\r\n          })}\r\n        </Container>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n//const rootElement = document.getElementById(\"root\");\r\n//ReactDOM.render(<App />, rootElement);\r\n"]},"metadata":{},"sourceType":"module"}