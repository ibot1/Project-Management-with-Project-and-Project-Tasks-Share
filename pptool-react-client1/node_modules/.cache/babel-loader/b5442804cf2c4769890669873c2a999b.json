{"ast":null,"code":"import _regeneratorRuntime from \"S:\\\\Spring Boot\\\\pptool-react-client_\\\\pptool-react-client\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"S:\\\\Spring Boot\\\\pptool-react-client_\\\\pptool-react-client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n//import axion from \"axios\";\nimport Axios from \"axios\";\nimport { GET_ERRORS, GET_BACKLOG, GET_PROJECT_TASK } from \"./types\";\nexport var addProjectTask = function addProjectTask(backlog_id, project_task, history) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return Axios.post(\"/api/backlog/\".concat(backlog_id), project_task);\n\n              case 3:\n                history.push(\"/projectBoard/\".concat(backlog_id));\n                dispatch({\n                  type: GET_ERRORS,\n                  payload: {}\n                });\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                dispatch({\n                  type: GET_ERRORS,\n                  payload: _context.t0.response.data\n                });\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 7]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var getBacklog = function getBacklog(backlog_id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return Axios.get(\"/api/backlog/\".concat(backlog_id));\n\n              case 3:\n                res = _context2.sent;\n                dispatch({\n                  type: GET_BACKLOG,\n                  payload: res.data\n                });\n                _context2.next = 10;\n                break;\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](0);\n                dispatch({\n                  type: GET_ERRORS,\n                  payload: {\n                    error: \"Not Found\"\n                  }\n                });\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 7]]);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var getProjectTask = function getProjectTask(backlog_id, projectSequence, history) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return Axios.get(\"/api/backlog/\".concat(backlog_id, \"/\").concat(projectSequence));\n\n              case 3:\n                res = _context3.sent;\n                dispatch({\n                  type: GET_PROJECT_TASK,\n                  payload: res.data\n                });\n                _context3.next = 10;\n                break;\n\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](0);\n                history.push(\"/dashboard\");\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[0, 7]]);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var updateProjectTask = function updateProjectTask(backlog_id, projectSequence, project_task, history) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return Axios.patch(\"/api/backlog/\".concat(backlog_id, \"/\").concat(projectSequence), project_task);\n\n              case 3:\n                res = _context4.sent;\n                history.push(\"/projectBoard/\".concat(backlog_id));\n                dispatch({\n                  type: GET_ERRORS,\n                  payload: {}\n                });\n                _context4.next = 10;\n                break;\n\n              case 8:\n                _context4.prev = 8;\n                _context4.t0 = _context4[\"catch\"](0);\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[0, 8]]);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["S:\\Spring Boot\\pptool-react-client_\\pptool-react-client\\src\\actions\\backlogActions.js"],"names":["Axios","GET_ERRORS","GET_BACKLOG","GET_PROJECT_TASK","addProjectTask","backlog_id","project_task","history","dispatch","post","push","type","payload","response","data","getBacklog","get","res","error","getProjectTask","projectSequence","updateProjectTask","patch"],"mappings":"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","sourcesContent":["//import axion from \"axios\";\r\nimport Axios from \"axios\";\r\nimport { GET_ERRORS, GET_BACKLOG, GET_PROJECT_TASK } from \"./types\";\r\n\r\nexport const addProjectTask = (\r\n  backlog_id,\r\n  project_task,\r\n  history\r\n) => async dispatch => {\r\n  try {\r\n    await Axios.post(`/api/backlog/${backlog_id}`, project_task);\r\n    history.push(`/projectBoard/${backlog_id}`);\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: {}\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data\r\n    });\r\n  }\r\n};\r\n\r\nexport const getBacklog = backlog_id => async dispatch => {\r\n  try {\r\n    const res = await Axios.get(`/api/backlog/${backlog_id}`);\r\n    dispatch({\r\n      type: GET_BACKLOG,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: { error: \"Not Found\" }\r\n    });\r\n  }\r\n};\r\n\r\nexport const getProjectTask = (\r\n  backlog_id,\r\n  projectSequence,\r\n  history\r\n) => async dispatch => {\r\n  try {\r\n    const res = await Axios.get(\r\n      `/api/backlog/${backlog_id}/${projectSequence}`\r\n    );\r\n    dispatch({\r\n      type: GET_PROJECT_TASK,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    history.push(\"/dashboard\");\r\n  }\r\n};\r\n\r\nexport const updateProjectTask = (\r\n  backlog_id,\r\n  projectSequence,\r\n  project_task,\r\n  history\r\n) => async dispatch => {\r\n  try {\r\n    const res = await Axios.patch(\r\n      `/api/backlog/${backlog_id}/${projectSequence}`,\r\n      project_task\r\n    );\r\n    history.push(`/projectBoard/${backlog_id}`);\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: {}\r\n    });\r\n  } catch (err) {}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}