{"ast":null,"code":"import _classCallCheck from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _defineProperty from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _taggedTemplateLiteral from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\src\\\\dragcomponents\\\\backlogdrag.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport ProjectTask from \"./ProjectTasks/ProjectTask\";\nimport \"@atlaskit/css-reset\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\nimport Column from \"./dragcomponents/column\";\nimport ReactDOM from \"react-dom\";\nvar Container = styled.div(_templateObject());\n\nfunction onDragEnd(result) {\n  var _objectSpread3;\n\n  var destination = result.destination,\n      source = result.source,\n      draggableId = result.draggableId; //origin, source, item to move were intialized by onDragEnd's prop\n  //return if not destination\n\n  if (!destination) {\n    return;\n  } //return if the item isn't moved\n\n\n  if (destination.droppableId === source.droppableId && destination.index === source.index) {\n    return;\n  }\n\n  var start = this.state.columns[source.droppableId]; //from column\n\n  var finish = this.state.columns[destination.droppableId]; //to column\n\n  if (start === finish) {\n    var newTaskIds = Array.from(start.taskIds);\n    newTaskIds.splice(source.index, 1);\n    newTaskIds.splice(destination.index, 0, draggableId);\n\n    var newColumn = _objectSpread({}, start, {\n      taskIds: newTaskIds\n    });\n\n    var _newState = _objectSpread({}, this.state, {\n      columns: _objectSpread({}, this.state.columns, _defineProperty({}, newColumn.id, newColumn))\n    });\n\n    this.setState(_newState);\n    return;\n  } // Moving from one list to another\n\n\n  var startTaskIds = Array.from(start.taskIds);\n  startTaskIds.splice(source.index, 1);\n\n  var newStart = _objectSpread({}, start, {\n    taskIds: startTaskIds\n  });\n\n  var finishTaskIds = Array.from(finish.taskIds);\n  finishTaskIds.splice(destination.index, 0, draggableId);\n\n  var newFinish = _objectSpread({}, finish, {\n    taskIds: finishTaskIds\n  });\n\n  var newState = _objectSpread({}, this.state, {\n    columns: _objectSpread({}, this.state.columns, (_objectSpread3 = {}, _defineProperty(_objectSpread3, newStart.id, newStart), _defineProperty(_objectSpread3, newFinish.id, newFinish), _objectSpread3))\n  });\n\n  this.setState(newState);\n}\n\nfunction populate(array_of_objects) {\n  var initialData = {\n    tasks: {},\n    columns: {\n      \"column-1\": {\n        id: \"column-1\",\n        title: \"TO_DO\",\n        taskIds: []\n      },\n      \"column-2\": {\n        id: \"column-2\",\n        title: \"IN_PROGRESS\",\n        taskIds: []\n      },\n      \"column-3\": {\n        id: \"column-3\",\n        title: \"DONE\",\n        taskIds: []\n      }\n    }\n  };\n\n  for (var i = 0; i < array_of_objects.length; i++) {\n    var key1 = \"task-\" + (i + 1);\n    initialData[\"tasks\"][key1] = {};\n    initialData[\"tasks\"][key1][\"id\"] = key1;\n    initialData[\"tasks\"][key1][\"content\"] = array_of_objects[i];\n  } //Second Part => Updating Colums [obj1, obj2]\n\n\n  for (var _i = 0; _i < array_of_objects.length; _i++) {\n    if (array_of_objects[_i].props.project_task.status === \"TO_DO\") {\n      initialData[\"columns\"][\"column-1\"][\"taskIds\"].push(array_of_objects[_i]);\n    }\n\n    if (array_of_objects[_i].props.project_task.status === \"IN_PROGRESS\") {\n      initialData[\"columns\"][\"column-2\"][\"taskIds\"].push(array_of_objects[_i]);\n    }\n\n    if (array_of_objects[_i].props.project_task.status === \"DONE\") {\n      initialData[\"columns\"][\"column-3\"][\"taskIds\"].push(array_of_objects[_i]);\n    }\n  }\n} //[object1,object2,object3] => Assuming it isn't empty\n//Update the tasks with objects\n//Update the colums with the task-ids\n//First Part => Updating tasks [obj1,obj2]\n\n\nvar Backlog =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Backlog, _Component);\n\n  function Backlog() {\n    _classCallCheck(this, Backlog);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Backlog).apply(this, arguments));\n  }\n\n  _createClass(Backlog, [{\n    key: \"render\",\n    value: function render() {\n      var project_tasks_prop = this.props.project_tasks_prop;\n      console.log();\n      var tasks = [];\n\n      if (typeof project_tasks_prop !== \"string\") {\n        tasks = project_tasks_prop.map(function (project_task) {\n          return React.createElement(ProjectTask, {\n            key: project_task.id,\n            project_task: project_task,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128\n            },\n            __self: this\n          });\n        });\n      }\n\n      return \"\";\n    }\n  }]);\n\n  return Backlog;\n}(Component);\n\nexport default Backlog;","map":{"version":3,"sources":["S:\\Spring Boot\\pptool-react-client - Copy\\src\\dragcomponents\\backlogdrag.js"],"names":["React","Component","Link","ProjectTask","DragDropContext","styled","Column","ReactDOM","Container","div","onDragEnd","result","destination","source","draggableId","droppableId","index","start","state","columns","finish","newTaskIds","Array","from","taskIds","splice","newColumn","newState","id","setState","startTaskIds","newStart","finishTaskIds","newFinish","populate","array_of_objects","initialData","tasks","title","i","length","key1","props","project_task","status","push","Backlog","project_tasks_prop","console","log","map"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAO,qBAAP;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,IAAMC,SAAS,GAAGH,MAAM,CAACI,GAAV,mBAAf;;AAIA,SAASC,SAAT,CAAmBC,MAAnB,EAA2B;AAAA;;AAAA,MACjBC,WADiB,GACoBD,MADpB,CACjBC,WADiB;AAAA,MACJC,MADI,GACoBF,MADpB,CACJE,MADI;AAAA,MACIC,WADJ,GACoBH,MADpB,CACIG,WADJ,EAC4B;AAErD;;AACA,MAAI,CAACF,WAAL,EAAkB;AAChB;AACD,GANwB,CAQzB;;;AACA,MACEA,WAAW,CAACG,WAAZ,KAA4BF,MAAM,CAACE,WAAnC,IACAH,WAAW,CAACI,KAAZ,KAAsBH,MAAM,CAACG,KAF/B,EAGE;AACA;AACD;;AAED,MAAMC,KAAK,GAAG,KAAKC,KAAL,CAAWC,OAAX,CAAmBN,MAAM,CAACE,WAA1B,CAAd,CAhByB,CAgB6B;;AACtD,MAAMK,MAAM,GAAG,KAAKF,KAAL,CAAWC,OAAX,CAAmBP,WAAW,CAACG,WAA/B,CAAf,CAjByB,CAiBmC;;AAE5D,MAAIE,KAAK,KAAKG,MAAd,EAAsB;AACpB,QAAMC,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAWN,KAAK,CAACO,OAAjB,CAAnB;AACAH,IAAAA,UAAU,CAACI,MAAX,CAAkBZ,MAAM,CAACG,KAAzB,EAAgC,CAAhC;AACAK,IAAAA,UAAU,CAACI,MAAX,CAAkBb,WAAW,CAACI,KAA9B,EAAqC,CAArC,EAAwCF,WAAxC;;AAEA,QAAMY,SAAS,qBACVT,KADU;AAEbO,MAAAA,OAAO,EAAEH;AAFI,MAAf;;AAKA,QAAMM,SAAQ,qBACT,KAAKT,KADI;AAEZC,MAAAA,OAAO,oBACF,KAAKD,KAAL,CAAWC,OADT,sBAEJO,SAAS,CAACE,EAFN,EAEWF,SAFX;AAFK,MAAd;;AAQA,SAAKG,QAAL,CAAcF,SAAd;AACA;AACD,GAvCwB,CAyCzB;;;AACA,MAAMG,YAAY,GAAGR,KAAK,CAACC,IAAN,CAAWN,KAAK,CAACO,OAAjB,CAArB;AACAM,EAAAA,YAAY,CAACL,MAAb,CAAoBZ,MAAM,CAACG,KAA3B,EAAkC,CAAlC;;AACA,MAAMe,QAAQ,qBACTd,KADS;AAEZO,IAAAA,OAAO,EAAEM;AAFG,IAAd;;AAKA,MAAME,aAAa,GAAGV,KAAK,CAACC,IAAN,CAAWH,MAAM,CAACI,OAAlB,CAAtB;AACAQ,EAAAA,aAAa,CAACP,MAAd,CAAqBb,WAAW,CAACI,KAAjC,EAAwC,CAAxC,EAA2CF,WAA3C;;AACA,MAAMmB,SAAS,qBACVb,MADU;AAEbI,IAAAA,OAAO,EAAEQ;AAFI,IAAf;;AAKA,MAAML,QAAQ,qBACT,KAAKT,KADI;AAEZC,IAAAA,OAAO,oBACF,KAAKD,KAAL,CAAWC,OADT,wDAEJY,QAAQ,CAACH,EAFL,EAEUG,QAFV,mCAGJE,SAAS,CAACL,EAHN,EAGWK,SAHX;AAFK,IAAd;;AAQA,OAAKJ,QAAL,CAAcF,QAAd;AACD;;AAED,SAASO,QAAT,CAAkBC,gBAAlB,EAAoC;AAClC,MAAIC,WAAW,GAAG;AAChBC,IAAAA,KAAK,EAAE,EADS;AAEhBlB,IAAAA,OAAO,EAAE;AACP,kBAAY;AAAES,QAAAA,EAAE,EAAE,UAAN;AAAkBU,QAAAA,KAAK,EAAE,OAAzB;AAAkCd,QAAAA,OAAO,EAAE;AAA3C,OADL;AAEP,kBAAY;AAAEI,QAAAA,EAAE,EAAE,UAAN;AAAkBU,QAAAA,KAAK,EAAE,aAAzB;AAAwCd,QAAAA,OAAO,EAAE;AAAjD,OAFL;AAGP,kBAAY;AAAEI,QAAAA,EAAE,EAAE,UAAN;AAAkBU,QAAAA,KAAK,EAAE,MAAzB;AAAiCd,QAAAA,OAAO,EAAE;AAA1C;AAHL;AAFO,GAAlB;;AASA,OAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,gBAAgB,CAACK,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;AAChD,QAAIE,IAAI,GAAG,WAAWF,CAAC,GAAG,CAAf,CAAX;AACAH,IAAAA,WAAW,CAAC,OAAD,CAAX,CAAqBK,IAArB,IAA6B,EAA7B;AACAL,IAAAA,WAAW,CAAC,OAAD,CAAX,CAAqBK,IAArB,EAA2B,IAA3B,IAAmCA,IAAnC;AACAL,IAAAA,WAAW,CAAC,OAAD,CAAX,CAAqBK,IAArB,EAA2B,SAA3B,IAAwCN,gBAAgB,CAACI,CAAD,CAAxD;AACD,GAfiC,CAiBlC;;;AACA,OAAK,IAAIA,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGJ,gBAAgB,CAACK,MAArC,EAA6CD,EAAC,EAA9C,EAAkD;AAChD,QAAIJ,gBAAgB,CAACI,EAAD,CAAhB,CAAoBG,KAApB,CAA0BC,YAA1B,CAAuCC,MAAvC,KAAkD,OAAtD,EAA+D;AAC7DR,MAAAA,WAAW,CAAC,SAAD,CAAX,CAAuB,UAAvB,EAAmC,SAAnC,EAA8CS,IAA9C,CAAmDV,gBAAgB,CAACI,EAAD,CAAnE;AACD;;AACD,QAAIJ,gBAAgB,CAACI,EAAD,CAAhB,CAAoBG,KAApB,CAA0BC,YAA1B,CAAuCC,MAAvC,KAAkD,aAAtD,EAAqE;AACnER,MAAAA,WAAW,CAAC,SAAD,CAAX,CAAuB,UAAvB,EAAmC,SAAnC,EAA8CS,IAA9C,CAAmDV,gBAAgB,CAACI,EAAD,CAAnE;AACD;;AACD,QAAIJ,gBAAgB,CAACI,EAAD,CAAhB,CAAoBG,KAApB,CAA0BC,YAA1B,CAAuCC,MAAvC,KAAkD,MAAtD,EAA8D;AAC5DR,MAAAA,WAAW,CAAC,SAAD,CAAX,CAAuB,UAAvB,EAAmC,SAAnC,EAA8CS,IAA9C,CAAmDV,gBAAgB,CAACI,EAAD,CAAnE;AACD;AACF;AACF,C,CAED;AACA;AACA;AAEA;;;IAEMO,O;;;;;;;;;;;;;6BACK;AAAA,UACCC,kBADD,GACwB,KAAKL,KAD7B,CACCK,kBADD;AAEPC,MAAAA,OAAO,CAACC,GAAR;AAEA,UAAIZ,KAAK,GAAG,EAAZ;;AAEA,UAAI,OAAOU,kBAAP,KAA8B,QAAlC,EAA4C;AAC1CV,QAAAA,KAAK,GAAGU,kBAAkB,CAACG,GAAnB,CAAuB,UAAAP,YAAY;AAAA,iBACzC,oBAAC,WAAD;AAAa,YAAA,GAAG,EAAEA,YAAY,CAACf,EAA/B;AAAmC,YAAA,YAAY,EAAEe,YAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADyC;AAAA,SAAnC,CAAR;AAGD;;AACD,aAAO,EAAP;AACD;;;;EAbmB1C,S;;AAgBtB,eAAe6C,OAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ProjectTask from \"./ProjectTasks/ProjectTask\";\r\nimport \"@atlaskit/css-reset\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Column from \"./dragcomponents/column\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nfunction onDragEnd(result) {\r\n  const { destination, source, draggableId } = result; //origin, source, item to move were intialized by onDragEnd's prop\r\n\r\n  //return if not destination\r\n  if (!destination) {\r\n    return;\r\n  }\r\n\r\n  //return if the item isn't moved\r\n  if (\r\n    destination.droppableId === source.droppableId &&\r\n    destination.index === source.index\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  const start = this.state.columns[source.droppableId]; //from column\r\n  const finish = this.state.columns[destination.droppableId]; //to column\r\n\r\n  if (start === finish) {\r\n    const newTaskIds = Array.from(start.taskIds);\r\n    newTaskIds.splice(source.index, 1);\r\n    newTaskIds.splice(destination.index, 0, draggableId);\r\n\r\n    const newColumn = {\r\n      ...start,\r\n      taskIds: newTaskIds\r\n    };\r\n\r\n    const newState = {\r\n      ...this.state,\r\n      columns: {\r\n        ...this.state.columns,\r\n        [newColumn.id]: newColumn\r\n      }\r\n    };\r\n\r\n    this.setState(newState);\r\n    return;\r\n  }\r\n\r\n  // Moving from one list to another\r\n  const startTaskIds = Array.from(start.taskIds);\r\n  startTaskIds.splice(source.index, 1);\r\n  const newStart = {\r\n    ...start,\r\n    taskIds: startTaskIds\r\n  };\r\n\r\n  const finishTaskIds = Array.from(finish.taskIds);\r\n  finishTaskIds.splice(destination.index, 0, draggableId);\r\n  const newFinish = {\r\n    ...finish,\r\n    taskIds: finishTaskIds\r\n  };\r\n\r\n  const newState = {\r\n    ...this.state,\r\n    columns: {\r\n      ...this.state.columns,\r\n      [newStart.id]: newStart,\r\n      [newFinish.id]: newFinish\r\n    }\r\n  };\r\n  this.setState(newState);\r\n}\r\n\r\nfunction populate(array_of_objects) {\r\n  var initialData = {\r\n    tasks: {},\r\n    columns: {\r\n      \"column-1\": { id: \"column-1\", title: \"TO_DO\", taskIds: [] },\r\n      \"column-2\": { id: \"column-2\", title: \"IN_PROGRESS\", taskIds: [] },\r\n      \"column-3\": { id: \"column-3\", title: \"DONE\", taskIds: [] }\r\n    }\r\n  };\r\n\r\n  for (let i = 0; i < array_of_objects.length; i++) {\r\n    var key1 = \"task-\" + (i + 1);\r\n    initialData[\"tasks\"][key1] = {};\r\n    initialData[\"tasks\"][key1][\"id\"] = key1;\r\n    initialData[\"tasks\"][key1][\"content\"] = array_of_objects[i];\r\n  }\r\n\r\n  //Second Part => Updating Colums [obj1, obj2]\r\n  for (let i = 0; i < array_of_objects.length; i++) {\r\n    if (array_of_objects[i].props.project_task.status === \"TO_DO\") {\r\n      initialData[\"columns\"][\"column-1\"][\"taskIds\"].push(array_of_objects[i]);\r\n    }\r\n    if (array_of_objects[i].props.project_task.status === \"IN_PROGRESS\") {\r\n      initialData[\"columns\"][\"column-2\"][\"taskIds\"].push(array_of_objects[i]);\r\n    }\r\n    if (array_of_objects[i].props.project_task.status === \"DONE\") {\r\n      initialData[\"columns\"][\"column-3\"][\"taskIds\"].push(array_of_objects[i]);\r\n    }\r\n  }\r\n}\r\n\r\n//[object1,object2,object3] => Assuming it isn't empty\r\n//Update the tasks with objects\r\n//Update the colums with the task-ids\r\n\r\n//First Part => Updating tasks [obj1,obj2]\r\n\r\nclass Backlog extends Component {\r\n  render() {\r\n    const { project_tasks_prop } = this.props;\r\n    console.log();\r\n\r\n    var tasks = [];\r\n\r\n    if (typeof project_tasks_prop !== \"string\") {\r\n      tasks = project_tasks_prop.map(project_task => (\r\n        <ProjectTask key={project_task.id} project_task={project_task} />\r\n      ));\r\n    }\r\n    return \"\";\r\n  }\r\n}\r\n\r\nexport default Backlog;\r\n"]},"metadata":{},"sourceType":"module"}