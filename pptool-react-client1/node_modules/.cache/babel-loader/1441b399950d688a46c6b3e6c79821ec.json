{"ast":null,"code":"import _defineProperty from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"S:\\\\Spring Boot\\\\pptool-react-client - Copy\\\\src\\\\dragcomponents\\\\backlogdrag.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport ProjectTask from \"./ProjectTasks/ProjectTask\";\nimport \"@atlaskit/css-reset\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\nimport Column from \"./dragcomponents/column\";\nimport ReactDOM from \"react-dom\";\nvar Container = styled.div(_templateObject());\nvar array_of_objects = [];\n\nfunction populate(array_of_objects) {\n  var initialData = {\n    tasks: {},\n    columns: {\n      \"column-1\": {\n        id: \"column-1\",\n        title: \"TO_DO\",\n        taskIds: []\n      },\n      \"column-2\": {\n        id: \"column-2\",\n        title: \"IN_PROGRESS\",\n        taskIds: []\n      },\n      \"column-3\": {\n        id: \"column-3\",\n        title: \"DONE\",\n        taskIds: []\n      }\n    }\n  };\n\n  for (var i = 0; i < array_of_objects.length; i++) {\n    var key1 = \"task-\" + (i + 1);\n    initialData[\"tasks\"][key1] = {};\n    initialData[\"tasks\"][key1][\"id\"] = key1;\n    initialData[\"tasks\"][key1][\"content\"] = array_of_objects[i];\n  } //Second Part => Updating Colums [obj1, obj2]\n\n\n  for (var _i = 0; _i < array_of_objects.length; _i++) {\n    if (array_of_objects[_i].props.project_task.status === \"TO_DO\") {\n      initialData[\"columns\"][\"column-1\"][\"taskIds\"].push(array_of_objects[_i]);\n    }\n\n    if (array_of_objects[_i].props.project_task.status === \"IN_PROGRESS\") {\n      initialData[\"columns\"][\"column-2\"][\"taskIds\"].push(array_of_objects[_i]);\n    }\n\n    if (array_of_objects[_i].props.project_task.status === \"DONE\") {\n      initialData[\"columns\"][\"column-3\"][\"taskIds\"].push(array_of_objects[_i]);\n    }\n  }\n\n  return initialData;\n} //[object1,object2,object3] => Assuming it isn't empty\n//Update the tasks with objects\n//Update the colums with the task-ids\n//First Part => Updating tasks [obj1,obj2]\n\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = populate();\n\n    _this.onDragEnd = function (result) {\n      var _objectSpread3;\n\n      var destination = result.destination,\n          source = result.source,\n          draggableId = result.draggableId; //origin, source, item to move were intialized by onDragEnd's prop\n      //return if not destination\n\n      if (!destination) {\n        return;\n      } //return if the item isn't moved\n\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      var start = _this.state.columns[source.droppableId]; //from column\n\n      var finish = _this.state.columns[destination.droppableId]; //to column\n\n      if (start === finish) {\n        var newTaskIds = Array.from(start.taskIds);\n        newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, draggableId);\n\n        var newColumn = _objectSpread({}, start, {\n          taskIds: newTaskIds\n        });\n\n        var _newState = _objectSpread({}, _this.state, {\n          columns: _objectSpread({}, _this.state.columns, _defineProperty({}, newColumn.id, newColumn))\n        });\n\n        _this.setState(_newState);\n\n        return;\n      } // Moving from one list to another\n\n\n      var startTaskIds = Array.from(start.taskIds);\n      startTaskIds.splice(source.index, 1);\n\n      var newStart = _objectSpread({}, start, {\n        taskIds: startTaskIds\n      });\n\n      var finishTaskIds = Array.from(finish.taskIds);\n      finishTaskIds.splice(destination.index, 0, draggableId);\n\n      var newFinish = _objectSpread({}, finish, {\n        taskIds: finishTaskIds\n      });\n\n      var newState = _objectSpread({}, _this.state, {\n        columns: _objectSpread({}, _this.state.columns, (_objectSpread3 = {}, _defineProperty(_objectSpread3, newStart.id, newStart), _defineProperty(_objectSpread3, newFinish.id, newFinish), _objectSpread3))\n      });\n\n      _this.setState(newState);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, this.state.columnOrder.map(function (columnId) {\n        var column = _this2.state.columns[columnId];\n        var tasks = column.taskIds.map(function (taskId) {\n          return _this2.state.tasks[taskId];\n        });\n        return React.createElement(Column, {\n          key: column.id,\n          column: column,\n          tasks: tasks,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["S:\\Spring Boot\\pptool-react-client - Copy\\src\\dragcomponents\\backlogdrag.js"],"names":["React","Component","Link","ProjectTask","DragDropContext","styled","Column","ReactDOM","Container","div","array_of_objects","populate","initialData","tasks","columns","id","title","taskIds","i","length","key1","props","project_task","status","push","App","state","onDragEnd","result","destination","source","draggableId","droppableId","index","start","finish","newTaskIds","Array","from","splice","newColumn","newState","setState","startTaskIds","newStart","finishTaskIds","newFinish","columnOrder","map","columnId","column","taskId"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ProjectTask from \"./ProjectTasks/ProjectTask\";\r\nimport \"@atlaskit/css-reset\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Column from \"./dragcomponents/column\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nvar array_of_objects = [];\r\n\r\nfunction populate(array_of_objects) {\r\n  var initialData = {\r\n    tasks: {},\r\n    columns: {\r\n      \"column-1\": { id: \"column-1\", title: \"TO_DO\", taskIds: [] },\r\n      \"column-2\": { id: \"column-2\", title: \"IN_PROGRESS\", taskIds: [] },\r\n      \"column-3\": { id: \"column-3\", title: \"DONE\", taskIds: [] }\r\n    }\r\n  };\r\n\r\n  for (let i = 0; i < array_of_objects.length; i++) {\r\n    var key1 = \"task-\" + (i + 1);\r\n    initialData[\"tasks\"][key1] = {};\r\n    initialData[\"tasks\"][key1][\"id\"] = key1;\r\n    initialData[\"tasks\"][key1][\"content\"] = array_of_objects[i];\r\n  }\r\n\r\n  //Second Part => Updating Colums [obj1, obj2]\r\n  for (let i = 0; i < array_of_objects.length; i++) {\r\n    if (array_of_objects[i].props.project_task.status === \"TO_DO\") {\r\n      initialData[\"columns\"][\"column-1\"][\"taskIds\"].push(array_of_objects[i]);\r\n    }\r\n    if (array_of_objects[i].props.project_task.status === \"IN_PROGRESS\") {\r\n      initialData[\"columns\"][\"column-2\"][\"taskIds\"].push(array_of_objects[i]);\r\n    }\r\n    if (array_of_objects[i].props.project_task.status === \"DONE\") {\r\n      initialData[\"columns\"][\"column-3\"][\"taskIds\"].push(array_of_objects[i]);\r\n    }\r\n  }\r\n\r\n  return initialData;\r\n}\r\n\r\n//[object1,object2,object3] => Assuming it isn't empty\r\n//Update the tasks with objects\r\n//Update the colums with the task-ids\r\n\r\n//First Part => Updating tasks [obj1,obj2]\r\n\r\nclass App extends React.Component {\r\n  state = populate();\r\n\r\n  //\r\n  onDragEnd = result => {\r\n    const { destination, source, draggableId } = result; //origin, source, item to move were intialized by onDragEnd's prop\r\n\r\n    //return if not destination\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    //return if the item isn't moved\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const start = this.state.columns[source.droppableId]; //from column\r\n    const finish = this.state.columns[destination.droppableId]; //to column\r\n\r\n    if (start === finish) {\r\n      const newTaskIds = Array.from(start.taskIds);\r\n      newTaskIds.splice(source.index, 1);\r\n      newTaskIds.splice(destination.index, 0, draggableId);\r\n\r\n      const newColumn = {\r\n        ...start,\r\n        taskIds: newTaskIds\r\n      };\r\n\r\n      const newState = {\r\n        ...this.state,\r\n        columns: {\r\n          ...this.state.columns,\r\n          [newColumn.id]: newColumn\r\n        }\r\n      };\r\n\r\n      this.setState(newState);\r\n      return;\r\n    }\r\n\r\n    // Moving from one list to another\r\n    const startTaskIds = Array.from(start.taskIds);\r\n    startTaskIds.splice(source.index, 1);\r\n    const newStart = {\r\n      ...start,\r\n      taskIds: startTaskIds\r\n    };\r\n\r\n    const finishTaskIds = Array.from(finish.taskIds);\r\n    finishTaskIds.splice(destination.index, 0, draggableId);\r\n    const newFinish = {\r\n      ...finish,\r\n      taskIds: finishTaskIds\r\n    };\r\n\r\n    const newState = {\r\n      ...this.state,\r\n      columns: {\r\n        ...this.state.columns,\r\n        [newStart.id]: newStart,\r\n        [newFinish.id]: newFinish\r\n      }\r\n    };\r\n    this.setState(newState);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        <Container>\r\n          {this.state.columnOrder.map(columnId => {\r\n            const column = this.state.columns[columnId];\r\n            const tasks = column.taskIds.map(\r\n              taskId => this.state.tasks[taskId]\r\n            );\r\n\r\n            return <Column key={column.id} column={column} tasks={tasks} />;\r\n          })}\r\n        </Container>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}